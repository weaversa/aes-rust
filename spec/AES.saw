enable_experimental;

let use_lemmas lemmas =
    simplify (addsimps lemmas (cryptol_ss()));

let proveit p script =
  do {
    print (str_concat "Proving " (show_term p));
    time (prove_print script p);
  };

import "AES.cry";

SboxInverts_lemma <- proveit {{ SboxInverts }} z3;

SubBytesInverts_lemma <- proveit {{ SubBytesInverts }} yices;

ShiftRowsInverts_lemma <- proveit {{ ShiftRowsInverts }} z3;

MixColumnsStepInverts_lemma <- proveit {{ MixColumnsStepInverts }} z3;

MixColumnsInverts_lemma <- proveit {{ MixColumnsInverts }}
  do {
    unfolding ["MixColumnsInverts", "InvMixColumns", "MixColumns"];
    goal_normalize ["InvMixColumnsStep", "MixColumnsStep"];
    use_lemmas [ MixColumnsStepInverts_lemma ];
    z3;
  };

AddRoundKeyInvolution_lemma <- proveit {{ AddRoundKeyInvolution }} z3;

RoundInverts_lemma <- proveit {{ RoundInverts }}
  do {
    unfolding ["RoundInverts", "InvRound", "Round"];
    use_lemmas [ AddRoundKeyInvolution_lemma
               , SubBytesInverts_lemma
               , ShiftRowsInverts_lemma
               , MixColumnsInverts_lemma
               ];
    z3;
  };

print "Proving CipherInverts_128";

CipherInverts_128_lemma <- proveit {{ CipherInverts`{128} }}
  do {
    unfolding ["CipherInverts", "InvCipher", "Cipher", "ecFoldl"];
    use_lemmas [ AddRoundKeyInvolution_lemma
               , SubBytesInverts_lemma
               , ShiftRowsInverts_lemma
               ];
    goal_normalize ["InvRound", "Round", "KeyExpansion"];
    use_lemmas [ RoundInverts_lemma ];
    unint_z3 ["KeyExpansion"];
  };
