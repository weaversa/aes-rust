let use_lemmas lemmas =
    simplify (addsimps lemmas (cryptol_ss()));

import "AES.cry";

print "Proving SboxInverts...";
SboxInverts_lemma <-
    time (prove_print z3 {{ \x -> InvSbox @ (Sbox @ x) == x }});

print "Proving SubBytesInverts...";
SubBytesInverts_lemma <-
    time (prove_print yices {{ \xs -> InvSubBytes (SubBytes xs) == xs }});

print "Proving ShiftRowsInverts...";
ShiftRowsInverts_lemma <-
    time (prove_print z3 {{ \xs -> InvShiftRows (ShiftRows xs) == xs }});

print "Proving MixColumnsStepInverts...";
MixColumnsStepInverts_lemma <-
    time (prove_print z3 {{ \xs -> InvMixColumnsStep (MixColumnsStep xs) == xs }});

print "Proving MixColumnsInverts...";
MixColumnsInverts_lemma <-
    time (prove_print z3 {{ \xs -> InvMixColumns (MixColumns xs) == xs }});

print "Proving xor inverts...";
xorInverts_lemma <-
    time (prove_print z3 {{ \(xs : Block_t) ki -> (xs ^ ki) ^ ki == xs }});

print "Proving AddRoundKey is an involution...";
AddRoundKeyInvolution_lemma <-
    time (prove_print z3 {{ \xs ki -> AddRoundKey (AddRoundKey xs ki) ki == xs }});

print "Proving RoundInverts...";
RoundInverts_lemma <-
    time (prove_print do {
        unfolding ["InvRound", "Round"];
        use_lemmas [ AddRoundKeyInvolution_lemma
                   , SubBytesInverts_lemma
                   , ShiftRowsInverts_lemma
                   , MixColumnsInverts_lemma
                   ];
        z3;
    } {{ \xs ki -> InvRound (Round xs ki) ki == xs }});

print "Proving CipherInverts...";
CipherInverts_lemma <-
    time (prove_print do {
        unfolding ["InvCipher", "Cipher", "foldl"];
        use_lemmas [ AddRoundKeyInvolution_lemma
                   , SubBytesInverts_lemma
                   , ShiftRowsInverts_lemma
                   , RoundInverts_lemma
                   ];
        print_goal;
        unint_z3 ["KeyExpansion"];
    } {{ \(key : [128]) plain -> InvCipher key (Cipher key plain) == plain }});
